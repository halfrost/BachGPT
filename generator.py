import numpy as np
import torch
from music21 import note, chord


def generate_music(model, network_input, pitchnames, n_vocab, sequence_length=100, generation_length=500):
    """ Generate a piano midi file """
    # Choose a random starting point for the sequence
    start = np.random.randint(0, len(network_input)-1)
    int_to_note = dict((number, note)
                       for number, note in enumerate(pitchnames))

    pattern = network_input[start]
    prediction_output = []

    # Generate music
    for note_index in range(generation_length):
        prediction_input = np.reshape(pattern, (1, len(pattern), 1))
        prediction_input = prediction_input / float(n_vocab)

        # Convert the NumPy array to a PyTorch tensor
        prediction_input = torch.from_numpy(prediction_input).float()
        # Extracting the output from the tuple
        prediction, _ = model(prediction_input, None)

        # Detach from computation graph and convert to numpy
        prediction = prediction.detach().cpu().numpy()

        index = np.argmax(prediction[0])

        result = int_to_note[index]
        prediction_output.append(result)

        pattern = np.append(pattern, index)
        pattern = pattern[1:len(pattern)]

    return prediction_output


def create_midi(prediction_output, filename="test_output.mid"):
    offset = 0
    output_notes = []

    # Create note and chord objects based on the values generated by the model
    for pattern in prediction_output:
        # Chords
        if ('.' in pattern) or pattern.isdigit():
            notes_in_chord = pattern.split('.')
            notes = []
            for current_note in notes_in_chord:
                new_note = note.Note(int(current_note))
                new_note.storedInstrument = instrument.Piano()
                notes.append(new_note)
            new_chord = chord.Chord(notes)
            new_chord.offset = offset
            output_notes.append(new_chord)
        # Notes
        else:
            new_note = note.Note(pattern)
            new_note.offset = offset
            new_note.storedInstrument = instrument.Piano()
            output_notes.append(new_note)

        # Time interval between each note
        offset += 0.5

    midi_stream = stream.Stream(output_notes)
    midi_stream.write('midi', fp=filename)
